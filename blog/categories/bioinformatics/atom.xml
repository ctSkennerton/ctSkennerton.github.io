<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bioinformatics | bio(logist | informatician)]]></title>
  <link href="http://ctSkennerton.github.io/blog/categories/bioinformatics/atom.xml" rel="self"/>
  <link href="http://ctSkennerton.github.io/"/>
  <updated>2013-12-27T05:18:02+10:00</updated>
  <id>http://ctSkennerton.github.io/</id>
  <author>
    <name><![CDATA[Connor Skennerton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Poking around inside grep]]></title>
    <link href="http://ctSkennerton.github.io/blog/2013/12/27/poking-around-inside-grep/"/>
    <updated>2013-12-27T00:00:00+10:00</updated>
    <id>http://ctSkennerton.github.io/blog/2013/12/27/poking-around-inside-grep</id>
    <content type="html"><![CDATA[<p>Playing around with the grep source code to make it output fasta/fastq records.
Check out the code <a href="https://github.com/ctSkennerton/fagrep">here</a>.</p>

<!-- more -->


<p>I&rsquo;m quite interested in string searching algorithms as I&rsquo;ve written a
program, <a href="http://ctskennerton.github.io/crass">crass</a>, which uses a few of them
to search for CRISPR elements.  Crass is pretty fast, but I want it to be faster,
specifically there is one point in crass where it searches for exact matches to many
thousands of patterns.
In a <a href="/blog/2013/10/28/testing-out-seqans-multipattern-search-implementations/">previous post</a>
I tried out a number of different &lsquo;multi-pattern matchers&rsquo; from <a href="http://seqan.de">seqan</a>
and was fairly unimpressed with their speed.  In this testing though I did not try
out the most widely used implementations of multi-pattern matching: GNU grep (using <code>-Ff</code> options).  I don&rsquo;t have any graphs to show, but it was faster, like <strong>a lot</strong> faster.</p>

<p>It wasn&rsquo;t a fair fight though, as grep works very differently to my test program
fxtract.  There is a great mailing list <a href="http://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html">post</a>
by one of the original grep authors on ways to speed things up.  It basically
comes down to I/O (not that the search algorithms aren&rsquo;t highly optimised themselves),
fast input from a file and not copying the data in memory is the key.  Grep doesn&rsquo;t
try to parse the file instead it just loads it into a big buffer in memory and searches
the whole thing, if it finds a match then it figures out the boundaries of the line
the match is on and prints it out.  This is in contrast to programs like fxtract or
crass that parse the file first to get the individual portions of each record before
the search is performed.</p>

<p>This got me thinking that I could drastically speed crass up if I switched over
to the grep way of processing files.  I was a little worried though that determining
the boundaries of a fasta/fastq record from an anonymous buffer might be a bit tricky
so before I modified crass I chose to modify grep so that it would output
fasta or fastq records.</p>

<p>The printing functions in grep live in <code>main.c</code> and start with the function <code>grep</code>, which
in-turn calls <code>grepbuf</code>, which in-turn calls <code>prtext</code> etc.  The code is surprisingly simple,
<code>grep</code> reads from the file and fills a buffer; <code>grepbuf</code> executes
one of the search functions on that buffer; if a match is found, a pointer to the first
character in the line the match was found is returned; and then the printing functions
take over.  The printing functions get a pointer to the start of the line and the end
of the line of the match and pass that through to <code>fwrite</code>.  Everything is handled using
pointer arithmetic for determining the start and end of where to print.</p>

<p>This is great since it&rsquo;s easy to change the pointer to the beginning a end of a record, rather
than a line.  So that just left the logic for me to write in to find the limits of
a record.  Below is a code snippet from grep where I&rsquo;ve added in the logic.  Fasta is
easy to implement as the <code>&gt;</code> symbol is generally unique.  Fastq on the other hand takes
a bit more work, since the <code>@</code> symbol can also be found in the quality string.</p>

<p>```c
char const <em>b = p + match_offset;  /</em>pointer to beginning of matching line<em>/
char const </em>endp = b + match_size; /<em>pointer to end of matching line</em>/
/<em> Avoid matching the empty line at the end of the buffer. </em>/
if (b == lim)
  break;
if(fasta_input)
  {</p>

<pre><code>/*find the beginning of the record*/
while(b &gt; p &amp;&amp; b[0] != '&gt;') --b;
/*find the end of the record*/
while(endp &lt; lim &amp;&amp; endp[0] != '&gt;') ++endp;
</code></pre>

<p>  }
if(fastq_input)
  {</p>

<pre><code>/*find the beginning of the record*/
while(b &gt;= beg)
  { 
    if(b[0] == '@')
      {
        if(b - 2 &lt;= beg)
          /*can't go back any further therefore must be start of record*/
          break;

        if (b[-1] == '\n' &amp;&amp; b[-2] != '+')
          /*@ symbol at beginning of line but not the first in the quality */
          break;
      }
  --b;
}
endp = b;
int newline_count;
for(newline_count = 0; newline_count &lt;4; ++newline_count)
  {
    /*find the end of the record*/
    while(endp &lt; lim &amp;&amp; endp[0] != '\n') 
      ++endp;

    ++endp;
  }
</code></pre>

<p>  }
```</p>

<p>The fastq format parsing has fairly obvious corner cases since with this
code there can be no text on the &lsquo;comment&rsquo; line and the whole
record must be of four lines.  This version of fastq is the recommended formatting from the
official <a href="http://nar.oxfordjournals.org/content/38/6/1767.full">fastq publication</a>,
which seems to have been adopted by Illumina and others, so hopefully this simple
parsing will work most of the time.</p>

<p>It&rsquo;s been a heap of fun looking at the way this very mature piece of software works
and I&rsquo;ve gotten a usable tool out of it.  Now it&rsquo;s onto the main event of
ripping out parts of the source code that I want for crass</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genome Scaffolders Suck]]></title>
    <link href="http://ctSkennerton.github.io/blog/2013/12/11/genome-scaffolders-suck/"/>
    <updated>2013-12-11T22:51:00+10:00</updated>
    <id>http://ctSkennerton.github.io/blog/2013/12/11/genome-scaffolders-suck</id>
    <content type="html"><![CDATA[<p>Experiences using a variety of contig scaffolding tools. It was not a good experience.</p>

<!-- more -->


<p>Recently in our lab we&rsquo;ve been getting some Illumina mate-pair data to
improve some metagenomic assemblies.  The sequencing has been going
well and we&rsquo;ve been generating a good number of mate-pairs without too much
duplication, but we&rsquo;ve had quite a bit of trouble with the bioinformatic part
of actually using this data to improve the assemblies.  There are a number of
software tools available to link contigs together after an assembly has been
done, however many assume that you are scaffolding a genome not a <em>meta</em>genome.<br/>
One of my colleagues suggested that, as a group, we perform a comparison of these
programs to determine which is the best one to suit our needs.</p>

<p>We decided to test out <a href="http://www.ncbi.nlm.nih.gov/pubmed/21149342">sspace</a>,
<a href="http://www.ncbi.nlm.nih.gov/pubmed/22492642">grass</a>,
<a href="http://www.ncbi.nlm.nih.gov/pubmed/23274213">scarpa</a>,
<a href="http://www.ncbi.nlm.nih.gov/pubmed/21929371">opera</a>,
<a href="http://www.ncbi.nlm.nih.gov/pubmed/21998153">mip</a> and
<a href="http://www.ncbi.nlm.nih.gov/pubmed/21926123">bambus2</a>.
From these six programs, only bambus2 was designed for metagenomes.
To test how well genome scaffolders could transition into
metagenome scaffolders we took one of our metagenomes and randomly broke
up 1000 contigs formed only using paired-end data into two pieces and
attempted to use some shiny new mate-pair data to put the pieces back
together again.  Little did we know the world of pain that we were about
to step into&hellip;</p>

<p>The following post will not talk about which algorithm was better or even
really what results each of these programs gave.  No, I&rsquo;m going to talk
about why using all these programs sucked.</p>

<h2>The war of attrition</h2>

<h3>grass</h3>

<p>We didn&rsquo;t even get <em>grass</em> installed; it required a particular library
distributed by IBM, which while free for academic users, required you to
give over some personal details, which we decided was something that we
didn&rsquo;t want to do.</p>

<p>One down, five to go&hellip;</p>

<h3>mip</h3>

<p>Oh where do I start with <em>mip</em>! <em>Mip</em> assumes that you&rsquo;re using SOLiD
data, which means that it expects that the orientation of the reads are
forward-forward.  Since Illumina&rsquo;s mate-pairs are reverse-forward I
needed to reverse complement the first read, making a duplicate file.  But
actually I needed to modify the second read file as well because <em>mip</em>
needs to have the read identifiers ending in &ldquo;<em>R3&rdquo; or &ldquo;</em>F3&rdquo; (WTF!), just
like they would be for a SOLiD run.  After this, I could then run any short-read
mapper to produce a SAM file for further processing.  But wait, you have
to map each read separately (i.e. not as pairs) and then pass the SAM
file through two preprocessing shell scripts.  The first of these shell
scripts, the opaquely named <code>merge.sh</code> simply takes the corresponding
SAM alignment record from the first and second reads and concatenates
the lines!  Why this needed to be a separate script and not just part of
the software proper is beyond me. Both of these preprocessing scripts created new files that
were essentially duplicates of the original SAM files made by the
short-read mapper, which I truly find annoying, especially since our
server is currently short on storage space.</p>

<p>When I ran <em>mip</em> proper, it threw an error.  That error may have been
easy for me to fix, it might have been something silly that I had put
into <em>mip&rsquo;s</em> configuration file, I don&rsquo;t know.  At this point I was pissed
about the whole process and never tried to run the program again.</p>

<p>Two down, four to go&hellip;</p>

<h3>opera</h3>

<p>It segfaulted on the test data that came with the software.</p>

<p>Three down, three to go&hellip;</p>

<h3>bambus2</h3>

<p>I had hope for bambus, and this was the scaffolder which I put the most
amount of effort to get it to work.  The problem with bambus is
that it is part of the <a href="http://sourceforge.net/apps/mediawiki/amos/index.php?title=AMOS">AMOS</a>
software package and the problem with AMOS is that it is fairly old
and uses it&rsquo;s own file format.  I have no doubt that the authors of AMOS
were hoping that their file format would catch on and that many tools
would plug into it, but alas the AMOS file format did not catch on,
instead we have SAM files.  So I set about looking for a SAM to AMOS
file converter, and I found <a href="http://sourceforge.net/p/amos/code/ci/master/tree/src/Converters/samtoafg.pl">one</a>
in the AMOS package.  It was a nice little perl script that
unfortunately didn&rsquo;t work (once again threw an error).</p>

<p>I decided to write my own converter in C++ using the
<a href="https://github.com/pezmaster31/bamtools">bamtools</a> and AMOS C++ APIs.
The fruits of my labour was the program <a href="https://github.com/ctSkennerton/sam2amos">sam2amos</a>,
which can take a BAM file and convert it into either an AMOS message
stream or an AMOS bank.  I was honestly really impressed with the
simplicity of both of these APIs, which made writing this program
relatively easy.</p>

<p>After making my AMOS bank file with sam2amos I ran the <code>goBambus2.py</code> wrapping script,
which unfortunately resulted in bambus segfaulting. Bugger!  I didn&rsquo;t
have it in me to debug the situation and figure out whether it was caused by a problem in
sam2amos (which it probably is) or something else.</p>

<p>Four down, two to go&hellip;</p>

<h2>Finally some results</h2>

<h3>scarpa</h3>

<p>I never personally ran <em>scarpa</em> (one of my colleagues did) but it shared some of the
annoyances that <em>mip</em> had.  <em>Scarpa</em> assumes that the reads are in
forward-reverse orientation so it required that both of the reads be
reverse complemented before use.  Like <em>mip</em>, the reads needed to be
mapped independently.  But unlike <em>mip</em>, <em>scarpa</em> gave some results!!
Of course the output was a simple fasta file of scaffolds without any
indication of what contigs were actually put together.  A little more
information would have been nice&hellip;</p>

<h3>sspace</h3>

<p><em>Sspace</em> is the best of the bunch when it comes to usability.  You can
specify what orientation the reads were in and there was only one manual
preprocessing step required; <em>sspace</em> does not accept compressed files so
the reads had to be passed through <code>ungzip</code> before use.  <em>Sspace</em> does however have some annoying
automatic preprocessing steps. First, the reads are copied into the
output directory (why? I don&rsquo;t know). Second, <em>sspace</em> only runs bowtie,
you cannot specify any other mapper, this isn&rsquo;t so much of a problem but
it annoyingly repeats the mapping even if the results from a previous
run exist in the output directory.  The output though is better than
<em>scarpa&rsquo;s</em> as it gives you a fasta file of scaffolds, an &ldquo;evidence file&rdquo; actually
telling you how it put contigs together and optionally a graphviz file
so that you can look at the contig linkages.</p>

<h2>What I want from a scaffolder</h2>

<ol>
<li>The ability to take either a SAM or BAM file of read mappings; or</li>
<li>If a particular read mapper is really required, give me the ability
to set the read orientation and used commpressed input files</li>
<li>One that uses pipes and does not copy reads into an output
directory. The less file I/O the better</li>
<li>No configureation files, I want to pipeline this thing, give me some
command-line options</li>
<li>Tell me how the scaffolding was done with some sort of easy tabular
file format.  Better yet make that output format <a href="http://www.ncbi.nlm.nih.gov/projects/genome/assembly/agp/AGP_Specification.shtml">AGP</a>,
which is required by NCBI when uploading scaffolds.</li>
</ol>


<h2>Epilogue</h2>

<p>Oh yeah, <em>sspace</em> gave better results than <em>scarpa</em></p>
]]></content>
  </entry>
  
</feed>
