<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bio(logist | informatician)]]></title>
  <link href="http://ctSkennerton.github.io/atom.xml" rel="self"/>
  <link href="http://ctSkennerton.github.io/"/>
  <updated>2013-12-11T23:35:26+10:00</updated>
  <id>http://ctSkennerton.github.io/</id>
  <author>
    <name><![CDATA[Connor Skennerton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Genome Scaffolders Suck]]></title>
    <link href="http://ctSkennerton.github.io/blog/2013/12/11/genome-scaffolders-suck/"/>
    <updated>2013-12-11T22:51:00+10:00</updated>
    <id>http://ctSkennerton.github.io/blog/2013/12/11/genome-scaffolders-suck</id>
    <content type="html"><![CDATA[<p>Experiences using a variety of contig scaffolding tools. It was not a good experience.</p>

<!-- more -->


<p>Recently in our lab we&rsquo;ve been getting some Illumina mate-pair data to
improve some metagenomic assemblies.  The sequencing has been going
well and we&rsquo;ve been generating a good number of mate-pairs without too much
duplication, but we&rsquo;ve had quite a bit of trouble with the bioinformatic part
of actually using this data to improve the assemblies.  There are a number of
software tools available to link contigs together after an assembly has been
done, however many assume that you are scaffolding a genome not a <em>meta</em>genome.<br/>
One of my colleagues suggested that, as a group, we perform a comparison of these
programs to determine which is the best one to suit our needs.</p>

<p>We decided to test out <a href="http://www.ncbi.nlm.nih.gov/pubmed/21149342">sspace</a>,
<a href="http://www.ncbi.nlm.nih.gov/pubmed/22492642">grass</a>,
<a href="http://www.ncbi.nlm.nih.gov/pubmed/23274213">scarpa</a>,
<a href="http://www.ncbi.nlm.nih.gov/pubmed/21929371">opera</a>,
<a href="http://www.ncbi.nlm.nih.gov/pubmed/21998153">mip</a> and
<a href="http://www.ncbi.nlm.nih.gov/pubmed/21926123">bambus2</a>.
From these six programs, only bambus2 was designed for metagenomes.
To test how well genome scaffolders could transition into
metagenome scaffolders we took one of our metagenomes and randomly broke
up 1000 contigs formed only using paired-end data into two pieces and
attempted to use some shiny new mate-pair data to put the pieces back
together again.  Little did we know the world of pain that we were about
to step into&hellip;</p>

<p>The following post will not talk about which algorithm was better or even
really what results each of these programs gave.  No, I&rsquo;m going to talk
about why using all these programs sucked.</p>

<h2>The war of attrition</h2>

<h3>grass</h3>

<p>We didn&rsquo;t even get <em>grass</em> installed; it required a particular library
distributed by IBM, which while free for academic users, required you to
give over some personal details, which we decided was something that we
didn&rsquo;t want to do.</p>

<p>One down, five to go&hellip;</p>

<h3>mip</h3>

<p>Oh where do I start with <em>mip</em>! <em>Mip</em> assumes that you&rsquo;re using SOLiD
data, which means that it expects that the orientation of the reads are
forward-forward.  Since Illumina&rsquo;s mate-pairs are reverse-forward I
needed to reverse complement the first read, making a duplicate file.  But
actually I needed to modify the second read file as well because <em>mip</em>
needs to have the read identifiers ending in &ldquo;<em>R3&rdquo; or &ldquo;</em>F3&rdquo; (WTF!), just
like they would be for a SOLiD run.  After this, I could then run any short-read
mapper to produce a SAM file for further processing.  But wait, you have
to map each read separately (i.e. not as pairs) and then pass the SAM
file through two preprocessing shell scripts.  The first of these shell
scripts, the opaquely named <code>merge.sh</code> simply takes the corresponding
SAM alignment record from the first and second reads and concatenates
the lines!  Why this needed to be a separate script and not just part of
the software proper is beyond me. Both of these preprocessing scripts created new files that
were essentially duplicates of the original SAM files made by the
short-read mapper, which I truly find annoying, especially since our
server is currently short on storage space.</p>

<p>When I ran <em>mip</em> proper, it threw an error.  That error may have been
easy for me to fix, it might have been something silly that I had put
into <em>mip&rsquo;s</em> configuration file, I don&rsquo;t know.  At this point I was pissed
about the whole process and never tried to run the program again.</p>

<p>Two down, four to go&hellip;</p>

<h3>opera</h3>

<p>It segfaulted on the test data that came with the software.</p>

<p>Three down, three to go&hellip;</p>

<h3>bambus2</h3>

<p>I had hope for bambus, and this was the scaffolder which I put the most
amount of effort to get it to work.  The problem with bambus is
that it is part of the <a href="http://sourceforge.net/apps/mediawiki/amos/index.php?title=AMOS">AMOS</a>
software package and the problem with AMOS is that it is fairly old
and uses it&rsquo;s own file format.  I have no doubt that the authors of AMOS
were hoping that their file format would catch on and that many tools
would plug into it, but alas the AMOS file format did not catch on,
instead we have SAM files.  So I set about looking for a SAM to AMOS
file converter, and I found <a href="http://sourceforge.net/p/amos/code/ci/master/tree/src/Converters/samtoafg.pl">one</a>
in the AMOS package.  It was a nice little perl script that
unfortunately didn&rsquo;t work (once again threw an error).</p>

<p>I decided to write my own converter in C++ using the
<a href="https://github.com/pezmaster31/bamtools">bamtools</a> and AMOS C++ APIs.
The fruits of my labour was the program <a href="https://github.com/ctSkennerton/sam2amos">sam2amos</a>,
which can take a BAM file and convert it into either an AMOS message
stream or an AMOS bank.  I was honestly really impressed with the
simplicity of both of these APIs, which made writing this program
relatively easy.</p>

<p>After making my AMOS bank file with sam2amos I ran the <code>goBambus2.py</code> wrapping script,
which unfortunately resulted in bambus segfaulting. Bugger!  I didn&rsquo;t
have it in me to debug the situation and figure out whether it was caused by a problem in
sam2amos (which it probably is) or something else.</p>

<p>Four down, two to go&hellip;</p>

<h2>Finally some results</h2>

<h3>scarpa</h3>

<p>I never personally ran <em>scarpa</em> (one of my colleagues did) but it shared some of the
annoyances that <em>mip</em> had.  <em>Scarpa</em> assumes that the reads are in
forward-reverse orientation so it required that both of the reads be
reverse complemented before use.  Like <em>mip</em>, the reads needed to be
mapped independently.  But unlike <em>mip</em>, <em>scarpa</em> gave some results!!
Of course the output was a simple fasta file of scaffolds without any
indication of what contigs were actually put together.  A little more
information would have been nice&hellip;</p>

<h3>sspace</h3>

<p><em>Sspace</em> is the best of the bunch when it comes to usability.  You can
specify what orientation the reads were in and there was only one manual
preprocessing step required; <em>sspace</em> does not accept compressed files so
the reads had to be passed through <code>ungzip</code> before use.  <em>Sspace</em> does however have some annoying
automatic preprocessing steps. First, the reads are copied into the
output directory (why? I don&rsquo;t know). Second, <em>sspace</em> only runs bowtie,
you cannot specify any other mapper, this isn&rsquo;t so much of a problem but
it annoyingly repeats the mapping even if the results from a previous
run exist in the output directory.  The output though is better than
<em>scarpa&rsquo;s</em> as it gives you a fasta file of scaffolds, an &ldquo;evidence file&rdquo; actually
telling you how it put contigs together and optionally a graphviz file
so that you can look at the contig linkages.</p>

<h2>What I want from a scaffolder</h2>

<ol>
<li>The ability to take either a SAM or BAM file of read mappings; or</li>
<li>If a particular read mapper is really required, give me the ability
to set the read orientation and used commpressed input files</li>
<li>One that uses pipes and does not copy reads into an output
directory. The less file I/O the better</li>
<li>No configureation files, I want to pipeline this thing, give me some
command-line options</li>
<li>Tell me how the scaffolding was done with some sort of easy tabular
file format.  Better yet make that output format <a href="http://www.ncbi.nlm.nih.gov/projects/genome/assembly/agp/AGP_Specification.shtml">AGP</a>,
which is required by NCBI when uploading scaffolds.</li>
</ol>


<h2>Epilogue</h2>

<p>Oh yeah, <em>sspace</em> gave better results than <em>scarpa</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing out Seqan's Multipattern Search Implementations]]></title>
    <link href="http://ctSkennerton.github.io/blog/2013/10/28/testing-out-seqans-multipattern-search-implementations/"/>
    <updated>2013-10-28T18:38:00+10:00</updated>
    <id>http://ctSkennerton.github.io/blog/2013/10/28/testing-out-seqans-multipattern-search-implementations</id>
    <content type="html"><![CDATA[<p>I recently discovered <a href="http://seqan.de">Seqan</a>, a header-only C++ library for
bioinformatics.  I&rsquo;ve been playing around with the toolkit to make some
small programs just to see whether I want to use it in a
larger project.  So far I&rsquo;ve written
<a href="https://github.com/ctSkennerton/prepmate">prepmate</a>, an adaptor trimming
program for Illumina&rsquo;s Nextera mate-pair libraries; and
<a href="https://github.com/ctSkennerton/fxtract">fxtract</a>, a
grep-like program for extracting fasta/fastq records from large files.  One of the
algorithms that I use in fxtract and in another program I&rsquo;ve written,
<a href="http://ctskennerton.github.io/crass/">crass</a>, is to search for
multiple patterns simultaneously (in this case a number of different DNA
motifs).  Seqan
implements a number of algorithms for multipattern matching (checkout
their tutorial page), however they don&rsquo;t give many clues as to why you
would choose one algorithm over another.  So I decided to take a few of
these implementations out for a spin using fxtract.</p>

<!--more-->


<h4>Test variables:</h4>

<ul>
<li>different numbers of patterns: 100, 1000, 10000</li>
<li>different length patterns: uniformly distributed size (0 &ndash; 100bp), 30bp,
60bp</li>
<li>Algorithms: WuManber, MultiBfam, AhoChorasick, SetHorspool</li>
<li>Test dataset: <a href="http://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?cmd=viewer&amp;m=data&amp;s=viewer&amp;run=SRR438796">SRR438796</a>,
which is part of an EBPR metagenome that was sequenced with Illumina GAIIx</li>
</ul>


<p>I should point out the the following speed tests are not necessarily
testing the algorithms, but the seqan implementation of these
algorithms in the context of what fxtract is trying to accomplish.  Which
means that other programs which implement these algorithms may perform
quite differently and the conclusions that I reach below may be
different in other situations. So with disclamers out of the way, how
does each implementation perform.</p>

<p>While running through a test of the wumanber implementation I discovered
something very odd when using the uniformly distributed patterns.  With
100 patterns the program ran through fine, outputting the correct
results,
however when using the 1000 or 10000 pattern file I got no output.  I
discovered though that these larger files contained some patterns that
had a length of 0 (i.e. they were empty lines), whereas the 100 pattern file&rsquo;s smallest pattern was
6bp.  I removed the empty lines from my pattern files and then and voila
there was output.  What this means is that <strong>the seqan WuManber
implementation fails silently when given an empty string as one of the
patterns!</strong> I&rsquo;ve submitted a <a href="http://trac.seqan.de/ticket/1117">bug report</a>
 with the seqan authors.</p>

<p><img src="http://ctSkennerton.github.io/images/seqan_multipattern_search_speed_benchmark.png", alt="Seqan speed test summary"></p>

<p>The above graph shows the total wall clock time in seconds for each
algorithm to process the input file with the different numbers of search
patterns (columns) or for the different types of patters (rows).<br/>
The main thing that striked me was the poor performance of the<br/>
seqan implementation of the Wu-Manber algorithm &ndash; it does not scale well.</p>

<p>I was lead to believe that Wu-Manber was the pinicle of multipattern
searching so I was a little perplexed by this result.  I know of another
stand alone implementation of Wu-Manber provided by <a href="http://www.oneunified.net/blog/2008/03/23/">Ray
Burkholder</a>.  As a
comparison I tested out this implementation as well and perhaps
unsurprisingly this implementation performed much better (it&rsquo;s referred
to in the figures as &ldquo;non-seqan wu-manber&rdquo;). <strong>Bottom line:
So don&rsquo;t use the Wu-Manber implementation in Seqan!</strong>  The
winner of the speed benchmark was the multiBfam algorithim which
performed nearly identically for any number of input patterns or for the
different length patterns.  In comparison the Aho-Corasick and
SetHorspool algorithms became slower with more patterns.</p>

<p>Speed tells you only half of the story and usually comes at the price of
memory consumption.  Both of the Wu-Manber implementations excelled at
memory consumption, or lack there of.  The worst were the Aho-Corasick
and SetHorspool algorithms, which used 20Gb+ of memory under the worst
case.  The multiBfam algorithm was somewhere in the middle (~7Gb under
the worst case scenario).</p>

<p><img src="http://ctSkennerton.github.io/images/seqan_multipattern_search_memory_benchmark.png", alt="Seqan speed test summary"></p>

<p>Considering only the seqan implementations I would probably go for the
multiBfam algorithm as my first choice when searching for less than 1000
patterns after which Wu-Manber would have to be preferred.<br/>
Base on what I&rsquo;ve seen the Aho-Corasick and SetHorspool implementations
in seqan are the worst options as they use far too much memory, however
that&rsquo;s not to say that other implementations of these algorithms would
perform differently.</p>

<h2>Scripts</h2>

<h4>make_patterns.sh</h4>

<p>Running this script requires that both <a href="https://github.com/lh3/seqtk">seqtk</a>
and <a href="https://github.com/lh3/bioawk">bioawk</a> are installed
and in your PATH.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>count in 100 1000 10000
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="c"># make uniformly distributed patterns</span>
</span><span class='line'>    seqtk sample SRR438796.fastq.gz
</span><span class='line'><span class="nv">$count</span> |<span class="se">\</span>
</span><span class='line'>        bioawk -c fastx <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">            start=rand() *99;</span>
</span><span class='line'><span class="s1">            end=rand() * 99;</span>
</span><span class='line'><span class="s1">            if(start &lt; end){                 </span>
</span><span class='line'><span class="s1">                if(end - start &gt; 15) {</span>
</span><span class='line'><span class="s1">                    print substr($seq, start, end)             </span>
</span><span class='line'><span class="s1">                }</span>
</span><span class='line'><span class="s1">            }else{</span>
</span><span class='line'><span class="s1">                if(start - end &gt; 15) {</span>
</span><span class='line'><span class="s1">                    print substr($seq, end, start)</span>
</span><span class='line'><span class="s1">                }</span>
</span><span class='line'><span class="s1">             }         </span>
</span><span class='line'><span class="s1">}&#39;</span> &gt;random_<span class="k">${</span><span class="nv">count</span><span class="k">}</span>_patterns.txt
</span><span class='line'>
</span><span class='line'>    <span class="c"># make 30bp patterns </span>
</span><span class='line'>    seqtk sample SRR438796.fastq.gz
</span><span class='line'><span class="nv">$count</span> |<span class="se">\</span>
</span><span class='line'>        bioawk -c fastx <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">            start=rand() * 30;</span>
</span><span class='line'><span class="s1">            end=start + 30;</span>
</span><span class='line'><span class="s1">            print substr($seq, start, end)</span>
</span><span class='line'><span class="s1">        }&#39;</span> &gt;random_<span class="k">${</span><span class="nv">count</span><span class="k">}</span>_30bp_patterns.txt
</span><span class='line'>
</span><span class='line'>    <span class="c"># make 60bp patterns</span>
</span><span class='line'>    seqtk sample SRR438796.fastq.gz
</span><span class='line'><span class="nv">$count</span> |<span class="se">\</span>
</span><span class='line'>        bioawk -c fastx <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">            start=rand() * 30;</span>
</span><span class='line'><span class="s1">            end=start + 60;</span>
</span><span class='line'><span class="s1">            print substr($seq, start, end)</span>
</span><span class='line'><span class="s1">        }&#39;</span> &gt;random_<span class="k">${</span><span class="nv">count</span><span class="k">}</span>_60bp_patterns.txt
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h4>time_implementations.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="k">for </span>impl in fxtract-*
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    for </span>p in speed_test/random_100*
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nv">patterns</span><span class="o">=</span><span class="k">$(</span>basename <span class="nv">$p</span><span class="k">)</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;real,user,sys,avemem,maxmem&quot;</span> &gt;speed_test/<span class="k">${</span><span class="nv">impl</span><span class="k">}</span>_<span class="k">${</span><span class="nv">patterns</span><span class="p">%.txt</span><span class="k">}</span>_times.txt
</span><span class='line'>        <span class="k">for </span>i in <span class="o">{</span>1..10<span class="o">}</span>
</span><span class='line'>        <span class="k">do</span>
</span><span class='line'>            /usr/bin/time -f <span class="s2">&quot;%E,%U,%S,%K,%M&quot;</span> -a -o speed_test/<span class="k">${</span><span class="nv">impl</span><span class="k">}</span>_<span class="k">${</span><span class="nv">patterns</span><span class="p">%.txt</span><span class="k">}</span>_times.txt ./<span class="nv">$impl</span> -f <span class="nv">$p</span> SRR438796.fastq.gz |<span class="se">\ </span>
</span><span class='line'>                wc -l &gt;&gt;speed_test/<span class="k">${</span><span class="nv">impl</span><span class="k">}</span>_<span class="k">${</span><span class="nv">patterns</span><span class="p">%.txt</span><span class="k">}</span>_words.txt
</span><span class='line'>        <span class="k">done</span>
</span><span class='line'><span class="k">    done</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h4>summarize_times.py</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">glob</span><span class="o">,</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">fixed_re</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&#39;fxtract-(\w+)_random_(10{2,5})_(\d\d)bp_patterns_times\.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">norm_re</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&#39;fxtract-(\w+)_random_(10{2,5})_patterns_minus_small_times\.txt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">impl_codes</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;ac&#39;</span><span class="p">:</span> <span class="s">&#39;aho-corasick&#39;</span><span class="p">,</span> <span class="s">&#39;sh&#39;</span><span class="p">:</span> <span class="s">&#39;set horspool&#39;</span><span class="p">,</span> <span class="s">&#39;mb&#39;</span><span class="p">:</span> <span class="s">&#39;multi-bfam&#39;</span><span class="p">,</span> <span class="s">&#39;wm&#39;</span><span class="p">:</span> <span class="s">&#39;wu-manber&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">times_files</span> <span class="o">=</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s">&quot;./fxtract*times.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">fn</span> <span class="ow">in</span> <span class="n">times_files</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">fixed_re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
</span><span class='line'>        <span class="n">impl</span> <span class="o">=</span> <span class="n">impl_codes</span><span class="p">[</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>        <span class="n">pattern_type</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pattern_count</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">match</span> <span class="o">=</span> <span class="n">norm_re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
</span><span class='line'>            <span class="n">impl</span> <span class="o">=</span> <span class="n">impl_codes</span><span class="p">[</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>            <span class="n">pattern_type</span> <span class="o">=</span> <span class="s">&#39;norm&#39;</span>
</span><span class='line'>            <span class="n">pattern_count</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Filename </span><span class="si">%s</span><span class="s"> does not fit either form&quot;</span> <span class="o">%</span> <span class="n">fn</span><span class="p">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span><span class='line'>        <span class="n">first_line</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="n">seconds</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">first_line</span><span class="p">:</span>
</span><span class='line'>                <span class="n">first_line</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>                <span class="k">continue</span>
</span><span class='line'>            <span class="n">fields</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">seconds</span> <span class="o">+=</span> <span class="nb">float</span><span class="p">(</span><span class="n">fields</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="nb">float</span><span class="p">(</span><span class="n">fields</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">seconds</span> <span class="o">/=</span> <span class="mf">10.0</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">impl</span><span class="p">,</span><span class="n">pattern_type</span><span class="p">,</span> <span class="n">pattern_count</span><span class="p">,</span> <span class="n">seconds</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>plot_summary.R</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">read</span><span class="o">.</span><span class="n">table</span><span class="p">(</span><span class="s">&quot;summary.txt&quot;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="n">T</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">p</span> <span class="o">&lt;-</span> <span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">Algorithm</span><span class="p">,</span> <span class="n">Wall</span><span class="o">.</span><span class="n">time</span><span class="p">))</span> <span class="o">+</span> <span class="n">geom_bar</span><span class="p">(</span><span class="n">stat</span><span class="o">=</span><span class="s">&quot;bin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">png</span><span class="p">(</span><span class="s">&quot;seqan_multipattern_search_speed_benchmark.png&quot;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span>
</span><span class='line'><span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span>
</span><span class='line'><span class="n">p</span> <span class="o">+</span> <span class="n">facet_grid</span><span class="p">(</span><span class="n">Pattern</span><span class="o">.</span><span class="n">type</span> <span class="o">~</span> <span class="n">Number</span><span class="o">.</span><span class="n">of</span><span class="o">.</span><span class="n">patterns</span><span class="p">)</span> <span class="o">+</span> <span class="n">theme</span><span class="p">(</span><span class="n">axis</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span>
</span><span class='line'><span class="n">element_text</span><span class="p">(</span><span class="n">angle</span> <span class="o">=</span> <span class="mi">45</span><span class="p">,</span> <span class="n">hjust</span> <span class="o">=</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">dev</span><span class="o">.</span><span class="n">off</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
