<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Pharo on Connor Skennerton</title>
		<link>/tags/pharo/</link>
		<description>Recent content in Pharo on Connor Skennerton</description>
		<generator>Hugo 0.74.1 -- gohugo.io</generator>
		<language>en-us</language>
		<managingEditor>c.skennerton@gmail.com (Connor Skennerton)</managingEditor>
		<webMaster>c.skennerton@gmail.com (Connor Skennerton)</webMaster>
		<copyright>Connor Skennerton â€” All rights reserved.</copyright>
		<lastBuildDate>Sat, 02 Apr 2022 14:52:00 -0700</lastBuildDate>
		<atom:link href="/tags/pharo/index.xml" rel="self" type="application/rss+xml" />
		<item>
			<title>Creating an AWS SDK for Pharo Smalltalk</title>
			<link>/2022/04/02/creating-an-aws-sdk-for-pharo-smalltalk/</link>
			<pubDate>Sat, 02 Apr 2022 14:52:00 -0700</pubDate>
			<author>c.skennerton@gmail.com (Connor Skennerton)</author>
			<guid isPermaLink="true">/2022/04/02/creating-an-aws-sdk-for-pharo-smalltalk/</guid>
			<description>&lt;p&gt;I&amp;rsquo;ve been working on an expanded AWS SDK for Pharo. Currently, 234 AWS services are available. See
the code on &lt;a href=&#34;https://github.com/ctSkennerton/aws-sdk-smalltalk&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Amazon Web Services (AWS) is a huge set (approximately 300 at time of writing) of services for doing
just about anything related to computing infrastructure and tools, often with multiple ways to
achieve the same or similar thing. The awesome thing about AWS is that there is an extensive set of
APIs for working with these services that make it a coders paradise since it opens up great avennues
for automation. The AWS APIs are implemented via HTTP which means that they can be accessed
basically from any programming language that lets you send and receive web requests. However it&amp;rsquo;s
much nicer to wrap up these API calls into software development kits (SDKs) that hide a lot of those
details. AWS has a lot of officially supported languages and there are also some community efforts
for other lanuages. Sadly, there isn&amp;rsquo;t a complete SDK for Smalltalk, although there is a &lt;a href=&#34;https://github.com/newapplesho/aws-sdk-smalltalk&#34;&gt;incomplete
version on Github&lt;/a&gt; that has partial support for
some services. I wanted to expand on this but the task seems hurculean since there are thousands of
APIs that need to be written.&lt;/p&gt;
&lt;h2 id=&#34;how-does-aws-manage-all-its-sdks&#34;&gt;How does AWS manage all its SDKs?&lt;/h2&gt;
&lt;p&gt;AWS is a big company but I still wanted to understand how they could release the same set of APIs in
all these different programming languages and keep them all in sync. Thankfully, the SDKs are all
open source so I looked through how the Python SDK,
&lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34;&gt;Boto3&lt;/a&gt;, is created. Boto3
actually relies on a separate package called &lt;a href=&#34;https://github.com/boto/botocore&#34;&gt;botocore&lt;/a&gt; that
handles all of the lower level HTTP API calls. If you&amp;rsquo;ve ever done &lt;code&gt;boto3.client(&#39;batch&#39;)&lt;/code&gt; in
Python, you&amp;rsquo;re actually using the code in botocore.&lt;/p&gt;
&lt;p&gt;Botocore makes heavy use of code generation! The &lt;a href=&#34;https://github.com/boto/botocore/tree/develop/botocore/data&#34;&gt;AWS APIs are defined in JSON formatted
files&lt;/a&gt; and this data is read at runtime
to dynamically create the correct classes. Looking at other languages, like
&lt;a href=&#34;https://github.com/aws/aws-sdk-ruby/tree/version-3/apis&#34;&gt;Ruby&lt;/a&gt; or
&lt;a href=&#34;https://github.com/aws/aws-sdk-go/tree/main/models/apis&#34;&gt;Go&lt;/a&gt;, there are the exact same files.&lt;/p&gt;
&lt;p&gt;Aha! AWS doesn&amp;rsquo;t make these SDKs individually, they publish data files that enable code generation.&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-data-files&#34;&gt;Understanding the data files&lt;/h2&gt;
&lt;p&gt;For each service there are multiple JSON files but the main one seems to be &lt;code&gt;service-2.json&lt;/code&gt;. This
file contains information about the &amp;ldquo;operations&amp;rdquo;, the API endpoints for the service, and the
&amp;ldquo;shapes&amp;rdquo;, which describe the input and output data structures for the API requests. There is also a
&amp;ldquo;metadata&amp;rdquo; section with lots of interesting things about the service itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-08-01&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;endpointPrefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;aps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;jsonVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rest-json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;serviceFullName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Amazon Prometheus Service&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;serviceId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;amp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;signatureVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;v4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;signingName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;aps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;amp-2020-08-01&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;operations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;shapes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The metadata has a &lt;code&gt;protocol&lt;/code&gt; key that broadly describes how to construct API requests and
deserializing responses.  There are five different protocols listed in the data files that AWS
services use to construct queries: &amp;lsquo;json&amp;rsquo;, &amp;lsquo;ec2&amp;rsquo;, &amp;lsquo;rest-xml&amp;rsquo;, &amp;lsquo;rest-json&amp;rsquo;, &amp;lsquo;query&amp;rsquo;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Protocol Name&lt;/th&gt;
&lt;th&gt;Services Using Protocol&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rest-json&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;json&lt;/td&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rest-xml&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ec2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Unsurprisingly, communicating with JSON is the most popular choice but it is split between &lt;code&gt;json&lt;/code&gt;
and &lt;code&gt;rest-json&lt;/code&gt;.  It would appear that the EC2 service is a one-of-a-kind and has it&amp;rsquo;s own dedicated
protocol, which is probably due to it being one of the oldest AWS services.&lt;/p&gt;
&lt;h3 id=&#34;json-protocol&#34;&gt;JSON Protocol&lt;/h3&gt;
&lt;p&gt;This appears to be the simplest of the protocols. All of the requests are sent to the root path of
the host and a header, &lt;code&gt;x-amz-target&lt;/code&gt;, provides information about which operation to target. All of
the required parameters are provided in the body of the request as JSON.&lt;/p&gt;
&lt;h3 id=&#34;rest-json-protocol&#34;&gt;REST-JSON Protocol&lt;/h3&gt;
&lt;p&gt;Each operation has a different path on the host server. Input parameters can be placed in the URL
path, query string, headers, or request body. The input shape is responsible for encoding which
parameters go where and the request body is formatted with JSON.&lt;/p&gt;
&lt;h3 id=&#34;query-protocol&#34;&gt;Query Protocol&lt;/h3&gt;
&lt;p&gt;The input shape is encoded as &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; and added to the query string of the request.
Nested information of the input shape, such as structures, maps, and lists are encoded are via an
incrementally generated prefix so that the key in the query string could become something like
&lt;code&gt;Foo.bar.member.1=value&lt;/code&gt; for a shape that looks something like &lt;code&gt;{&amp;quot;Foo&amp;quot;: {&amp;quot;bar&amp;quot;: [&amp;quot;value&amp;quot;]}}&lt;/code&gt; in
JSON. Structures are created by &lt;code&gt;prefix.member&lt;/code&gt;, lists are created by &lt;code&gt;prefix.listName.1&lt;/code&gt;, and maps
are created by &lt;code&gt;prefix.mapName.key&lt;/code&gt; and &lt;code&gt;prefix.mapName.value&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;rest-xml-protocol&#34;&gt;REST-XML Protocol&lt;/h3&gt;
&lt;p&gt;The same as rest-json but the request and response bodies are formatted with XML rather than JSON.&lt;/p&gt;
&lt;h3 id=&#34;ec2-protocol&#34;&gt;EC2 Protocol&lt;/h3&gt;
&lt;p&gt;Very similar to the Query protocol; used only on the EC2 service.&lt;/p&gt;
&lt;h2 id=&#34;creating-an-aws-service-code-generator&#34;&gt;Creating an AWS service code generator&lt;/h2&gt;
&lt;p&gt;The python an Ruby SDKs ship with the JSON files and read them every time there is a call to
generate a new client. This is an interesting approach that makes use of metaprogramming in these
languages. I chose instead to use code generation to build the services beforehand. Since Pharo
doesn&amp;rsquo;t separate code and runtime once you create a class it&amp;rsquo;s created and can be accessed in the
image so creating the classes at &amp;ldquo;runtime&amp;rdquo; doesn&amp;rsquo;t really mean the same thing as it does in those
other languages. Furthermore, it&amp;rsquo;s better to generate the classes so they can be imported with
metacello individually if needed. It&amp;rsquo;s very unlikely that you need all 300 odd AWS services in your
image so there is no reason to get all of the data for them. Of course, you are free to use the code
generation package yourself if you have the data files on hand and want to go that way.&lt;/p&gt;
&lt;h3 id=&#34;operations&#34;&gt;Operations&lt;/h3&gt;
&lt;p&gt;I followed the general structure of other SDKs and created a single class for each service.  That
class has a number of messages, one for each of the operations. An operation is simply an API request.&lt;/p&gt;
&lt;p&gt;Here is an example of how an operation is encoded in the JSON data files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;operations&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CreateAlertManagerDefinition&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CreateAlertManagerDefinition&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;requestUri&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/workspaces/{workspaceId}/alertmanager/definition&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;responseCode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;202&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CreateAlertManagerDefinitionRequest&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CreateAlertManagerDefinitionResponse&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ThrottlingException&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ConflictException&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ValidationException&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ResourceNotFoundException&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AccessDeniedException&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;InternalServerException&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ServiceQuotaExceededException&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;documentation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;Create an alert manager definition.&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;idempotent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The operation name, &lt;code&gt;CreateAlertManagerDefinition&lt;/code&gt;, would get converted to the message
&lt;code&gt;AWSAmp&amp;gt;&amp;gt;createAlertManagerDefinition: aCreateAlertManagerDefinitionRequest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Due to the way that messages work I chose to model the shapes as objects. In Python SDK, shapes are
not turned into objects but instead the python function calls contain many keyword arguments. This
works well for Python where keyword arguments can be given in any order to a function. In Pharo,
arguments need to be given in order so it becomes quite cumbersome to put in 10 different arguments,
most of which are optional.&lt;/p&gt;
&lt;p&gt;Instead, the operations take a single argument, a request object, that can be serialized.  This is
the same approach that the Go SDK takes.&lt;/p&gt;
&lt;p&gt;The operation above has a templated path on the server: the &lt;code&gt;requestUri&lt;/code&gt; of the operation contains a
parameter, &lt;code&gt;workspaceId&lt;/code&gt; that must be obtained from the input. In this case the
&lt;code&gt;CreateAlertManagerDefinitionRequest&lt;/code&gt; is modeled as an object in Pharo that contains a &lt;code&gt;workspaceId&lt;/code&gt;
accessor.&lt;/p&gt;
&lt;p&gt;The definition of the shapes is also in the JSON data definitions. Below is what the &lt;code&gt;CreateAlertManagerDefinitionRequest&lt;/code&gt;
looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;CreateAlertManagerDefinitionRequest&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;structure&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;workspaceId&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;members&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;clientToken&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;IdempotencyToken&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;documentation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;idempotencyToken&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AlertManagerDefinitionData&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;documentation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;The alert manager definition data.&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;workspaceId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;shape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;WorkspaceId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;documentation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;The ID of the workspace in which to create the alert manager definition.&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;uri&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;locationName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;workspaceId&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;documentation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;Represents the input of a CreateAlertManagerDefinition operation.&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Shapes also have types, in this case it is a &lt;code&gt;structure&lt;/code&gt; but there are others like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;,
&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;timestamp&lt;/code&gt;, etc. Structures have a members dictionary which for the smalltalk SDK get
converted into the accessors of the object. You can also see that the members contain some metadata
about where in the request they should be put. The &lt;code&gt;workspaceId&lt;/code&gt; member has a location of the &lt;code&gt;uri&lt;/code&gt;,
whereas the other two members don&amp;rsquo;t have that information (based on the other SDKs this means to put
them in the default location, meaning the body of the request). The members also define their own
shapes creating a recursive descent till the shapes are basic types like &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;using-the-code-generator&#34;&gt;Using the code generator&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;Load in the code generator group&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;Metacello&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;baseline:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;AWS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;repository:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;github://ctSkennerton/aws-sdk-smalltalk/pharo-repository&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;load:&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Client-Creator&amp;#39;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AWSClientCreator&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;point the code generator to the directory containing the AWS data files.
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;You will need to bootstrap them from another SDK like botocore.
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;serviceData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findJson:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;/botocore/data&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asFileReference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;Load in the JSON definition for the Athena service and create the classes&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;athenaDefinition&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; (&lt;span class=&#34;nc&#34;&gt;NeoJSONReader&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;on:&lt;/span&gt; (&lt;span class=&#34;nv&#34;&gt;serviceData&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;at:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;athena&amp;#39;&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;readStream&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createFromJson:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;athenaDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-and-try-it-out&#34;&gt;Install and try it out&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;Load only the Amp service from the example above.
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;Replace the parameter to load with the services you use&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;Metacello&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;baseline:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;AWS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;repository:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;github://ctSkennerton/aws-sdk-smalltalk/pharo-repository&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;load:&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Amp&amp;#39;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;


&lt;span class=&#34;c&#34;&gt;&amp;#34;default parameters to pass to the request. Change to your values&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;workspace&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;CAJK12N&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;COMPLETE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;Create a new AMP service. Will use your credentials from ~/.aws&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AWSAmp&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createAlertManagerDefinition:&lt;/span&gt;
    (&lt;span class=&#34;nc&#34;&gt;AWSAmpCreateAlertManagerDefinitionRequest&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;workspaceId:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;workspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;)&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;project-status-work-still-to-be-done&#34;&gt;Project Status, Work Still to be Done&lt;/h2&gt;
&lt;p&gt;This is still very much a work in progress. So far the class generators cover the JSON and REST-JSON
protocols, which is still 234 different services but lacks some important ones such as ec2, s3, and
SNS. There also isn&amp;rsquo;t any nice parsing of responses from any of the services so the response objects
are basically the raw JSON returned.&lt;/p&gt;
&lt;p&gt;Contributions very welcome, make a pull request on &lt;a href=&#34;https://github.com/ctSkennerton/aws-sdk-smalltalk&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;!---
## Shapes

### Writing Shapes

JSON shapes are easy using NeoJSON mapping. For each shape a `neoJsonMapping` message on the class side of the shape which is recognized by the serializer to convert the custom shapes.

```smalltalk
serviceDAta := AWSClientCreator new findJson: &#39;/tmp/botocore/botocore/data&#39; asFileReference.
sd := serviceDAta collect: [ :a | (NeoJSONReader on: a readStream) next ].

&#34;How unique are shape names across services?&#34;
allShapes := Dictionary new.
sd associationsDo: [ :v |
    (v value at: &#39;shapes&#39;) keysDo: [:s |
        (allShapes at: s ifAbsent: [
            allShapes  at: s put: Set new.
            ]) add: v key ]].

&#34;Here are the duplicated Shapes. There are 5470 of them&#34;
allShapes select: [ :v | v size &gt; 1 ].

&#34;Of the shapes that have the same name, do they have the same definition?&#34;
duplicatedShapeDefinitions := Dictionary new.
(allShapes select: [ :v | v size &gt; 1 ])
	keysAndValuesDo:  [ :shape :services |
		services do: [ :service |
			((duplicatedShapeDefinitions
				at: shape
				ifAbsent: [
                    duplicatedShapeDefinitions at: shape put: OrderedCollection new.]) add: ((sd at: service at: &#39;shapes&#39;)at: shape)) ] ].

&#34;What are the different base types for shapes&#34;
shapeTypes := Bag new.
sd valuesDo: [ :service | (service at: &#39;shapes&#39;) valuesDo: [ :shape | shapeTypes add: (shape at: &#39;type&#39;)] ].
shapeTypes valuesAndCounts
```

This is the general term for the various input and outputs from the operations
There are approximately 46,000 different shapes defined across all services with about 5,000 sharing a name.
The shapes come in a few basic types: structures, lists, maps, strings. Here are all of the options

| type | count |
|------|-------|
| float | 36 |
| blob | 105 |
| double | 211 |
| long | 357 |
| timestamp | 437 |
| map | 612 |
| boolean | 631 |
| integer | 1730 |
| list | 7298 |
| string | 13746 |
| structure | 36981 |


### Mapping the objects to JSON

```smalltalk
t := AWSBatchComputeEnvironmentDetail new type: &#39;container&#39;; computeEnvironmentName: &#39;test&#39;; ecsClusterArn: &#39;arn:::fake&#39;.

bleg := NeoJSONObjectMapping new subjectClass: AWSBatchComputeEnvironmentDetail; mapAccessors: #(type computeEnvironmentName ecsClusterArn); yourself.

String streamContents: [ :stream |
	bleg writeObject: t on: ((NeoJSONWriter on: stream)
	prettyPrint: true)
	].

```
---!&gt;


</description>
		</item>
		<item>
			<title>Using Strings in Pharo Smalltalk</title>
			<link>/2021/07/19/using-strings-in-pharo-smalltalk/</link>
			<pubDate>Mon, 19 Jul 2021 01:20:17 -0700</pubDate>
			<author>c.skennerton@gmail.com (Connor Skennerton)</author>
			<guid isPermaLink="true">/2021/07/19/using-strings-in-pharo-smalltalk/</guid>
			<description>&lt;p&gt;Smalltalk syntax can be a little confusing coming from other languages. Here I&amp;rsquo;ll show some comparisions
between Python string operations and Smalltalk.&lt;/p&gt;
&lt;h2 id=&#34;substrings--slicing&#34;&gt;Substrings / Slicing&lt;/h2&gt;
&lt;p&gt;Python strings use the slice notation where you can place up to three colon-separated values for the start, stop,
and step. Python strings are 0-indexed and the stop argument is one past the final element that you want.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# bcdefg&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# ab&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# bcdef&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# bcdef&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The slice notation in Python is compact and versatile to be used when getting the beginning, middle, or end
of a string. Smalltalk achieves the same results using a number of different messages that can be a little
confusing when you first get into it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;Leave off only the first character&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;allButFirst&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;bcdefg&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;allButFirst with an argument to leave off that many characters&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;allButFirst:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;cdefg&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;There are also the first and last messages that produce the same result
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;as s[1:] or s[:5]. Remember though that Smalltalk&amp;#39;s indexing is 1-based 
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;and inclusive&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;first:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;ab&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;last:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;fg&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;Get the middle of the string&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;copyFrom:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;bcdef&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;Smalltalk indexing doesn&amp;#39;t have the same trick with negative indexes,
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;instead you need to calculate the size&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;copyFrom:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;formatting&#34;&gt;Formatting&lt;/h2&gt;
&lt;p&gt;Python has extensive string formatting using either the &lt;code&gt;.format()&lt;/code&gt; method of string or using f-strings.
Pharo has a similar &lt;code&gt;format:&lt;/code&gt; message that can be used for inpterpolating other objects in strings.
Each of these objects must have a &lt;code&gt;asString&lt;/code&gt; method for this to work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;pass in a collection where values are indexed by number (like Array or OrderedCollection)&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#39;ab {1} ef {2}&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;format:&lt;/span&gt; {&lt;span class=&#34;s&#34;&gt;&amp;#39;cd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;gh&amp;#39;&lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;ab cd ef gh&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;pass in a collection where values are indexed by name&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#39;ab {one} ef {two}&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;format:&lt;/span&gt; 
    (&lt;span class=&#34;nc&#34;&gt;Dictionary&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;with:&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#one&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;cd&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;with:&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#two&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;gh&amp;#39;&lt;/span&gt;)&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;ab cd ef gh&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike python there is no format mini-language. Which means that if you want to format things
like numbers in a specific way you need to do that before passing the object to &lt;code&gt;format:&lt;/code&gt;.
Numbers have a basic message &lt;code&gt;printString&lt;/code&gt; that will use the default settings. For very large or
very small numbers it will print in scientific notation.&lt;/p&gt;
&lt;p&gt;There isn&amp;rsquo;t a general number formatter like &lt;code&gt;printf&lt;/code&gt; in C/C++, instead there are messages for each
type of formatting you want on a number. &lt;code&gt;printPaddedWith: aCharacter to: aNumber&lt;/code&gt; is used to
perform left-side padding with a character of your choice. Normally you would choose zero to
mimic the &lt;code&gt;printf&lt;/code&gt; behaviour but you can choose any character you like.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;m&#34;&gt;123&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printPaddedWith:&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;     &lt;span class=&#34;c&#34;&gt;&amp;#34;&amp;#39;00000123&amp;#39;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;123&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;printPaddedWith:&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;$,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;     &lt;span class=&#34;c&#34;&gt;&amp;#34;&amp;#39;,,,,,123&amp;#39;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;123&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printPaddedWith:&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;&amp;#39;000123.31&amp;#39;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;123&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printPaddedWith:&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;&amp;#39;123.31&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;printShowingDecimalPlaces: placesDesired&lt;/code&gt; is for controlling the number of decimal places.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;m&#34;&gt;123.31&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printShowingDecimalPlaces:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;&amp;#39;123.310000000000&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To combine these with the &lt;code&gt;format:&lt;/code&gt; message you could do something like the following to make
a dynamic array of the values you want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;{1}&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;format:&lt;/span&gt; {  &lt;span class=&#34;m&#34;&gt;1.123&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printShowingDecimalPlaces:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There isn&amp;rsquo;t a scientific formatter though, instead the default is to print a number in decimal
format when it&amp;rsquo;s small, and switch to the scientific format as it gets bigger. I found this
a little annoying as I wanted to print numbers in a consistent scientific format no matter their
size.&lt;/p&gt;
&lt;p&gt;There is a package called &lt;a href=&#34;http://ss3.gemstone.com/ss/NumberPrinter/&#34;&gt;NumberPrinter&lt;/a&gt; that has more
versatile printing options, including scientific printing. For example, the default settings with
&lt;code&gt;FloatPrinterScientificFormat&lt;/code&gt; would convert 123.123 to 1.23123e2. But you can change that with
different messages to the number printer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nv&#34;&gt;rws&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ReadWriteStream&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;with:&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FloatPrinterScientificFormat&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;exponentDigitCount:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;exponentChar:&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;$E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;123.123&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;on:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rws&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;rws&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;1.23123E02&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sadly this is a bit more verbose than python: &lt;code&gt;&#39;{:.5E}&#39;.format(0.09112346) = &#39;9.11235E-02&#39;&lt;/code&gt;&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Using Dictionaries in Pharo Smalltalk</title>
			<link>/2020/12/21/using-dictionaries-in-pharo-smalltalk/</link>
			<pubDate>Mon, 21 Dec 2020 13:54:32 -0800</pubDate>
			<author>c.skennerton@gmail.com (Connor Skennerton)</author>
			<guid isPermaLink="true">/2020/12/21/using-dictionaries-in-pharo-smalltalk/</guid>
			<description>&lt;p&gt;Starting out with Smalltalk can be a little jarring as it doesn&amp;rsquo;t have the similar syntax as launguages that
are more heavily inspired by C. Dictionaries are one kind of data structure where I noticed this the most so
I put together my notes on using them in Pharo with some comparisons to Python. In many other languages there
is a &lt;em&gt;subscript operator&lt;/em&gt; that allows you to access a value in a dictionary
(and also a position in an array). It&amp;rsquo;s often written &lt;code&gt;dict[key]&lt;/code&gt; to access a value and &lt;code&gt;dict[key]=val&lt;/code&gt; to
set a value to an existing key or add in a new key. Smalltalk doesn&amp;rsquo;t contain
a subscript operator and so interacting with dictionaries requires a slight change
in the mental model to get things done.&lt;/p&gt;
&lt;p&gt;Dictionaries in Pharo are composed of Associations. An Association is a class that holds a single keyâ€“value
pair. You can create an Association by sending the &lt;code&gt;-&amp;gt;&lt;/code&gt; binary message to an object (e.g. &lt;code&gt;1 -&amp;gt; 2&lt;/code&gt;). Associations
can be used outside of dictionaries as well, for example the following code snippet creates an Array of Associations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;{ &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;initialization&#34;&gt;Initialization&lt;/h2&gt;
&lt;p&gt;You can create a Dictionary from an Array of Associations using the &lt;code&gt;newFrom:&lt;/code&gt; message&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nc&#34;&gt;Dictionary&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;newFrom:&lt;/span&gt; { &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; }&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or you can achieve the same thing with the &lt;code&gt;at:put:&lt;/code&gt; message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nc&#34;&gt;Dictionary&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt; 
	&lt;span class=&#34;nf&#34;&gt;at:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;put:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
	&lt;span class=&#34;nf&#34;&gt;at:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;put:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
	&lt;span class=&#34;nf&#34;&gt;at:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;put:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
	&lt;span class=&#34;nf&#34;&gt;yourself&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While the &lt;code&gt;newFrom:&lt;/code&gt; message seems intuative to me, the &lt;code&gt;at:put:&lt;/code&gt; way of creating Dictionaries took me
a while to get my head around. First,
notice the semicolons between the successive calls to &lt;code&gt;at:put:&lt;/code&gt;, this is for cascading messages that should
all go to the same &amp;ldquo;receiver&amp;rdquo;, which in this case is the Dictionary object created by &lt;code&gt;new&lt;/code&gt;. What happens
if you don&amp;rsquo;t put in the semicolons? Pharo will get confused and think you are trying to send a single
message called &lt;code&gt;at:put:at:put:at:put:&lt;/code&gt; instead of three separate messages and you&amp;rsquo;ll get an error.
Why is there no semicolon after
&lt;code&gt;new&lt;/code&gt;? So what&amp;rsquo;s happening is that the &lt;code&gt;new&lt;/code&gt; message is creating an instance of the Dictionary class i.e.
a Dictionary object which gets returned from the &lt;code&gt;new&lt;/code&gt; message. The &lt;code&gt;at:put:&lt;/code&gt; messages are then applied to
the return value of &lt;code&gt;new&lt;/code&gt;. If you put a semicolon after &lt;code&gt;new&lt;/code&gt; then all of the subsequent messages will be
sent to what &lt;code&gt;new&lt;/code&gt; was sent to, rather than the result of &lt;code&gt;new&lt;/code&gt;. In other words, &lt;code&gt;at:put:&lt;/code&gt; will be sent to
the Dictionary class and not a Dictionary object (which causes an error). The last bit of the statement, &lt;code&gt;yourself&lt;/code&gt;,
is needed to return the Dictionary object. Without &lt;code&gt;yourself&lt;/code&gt; the return value of the final &lt;code&gt;at:put:&lt;/code&gt; message
is used, which is the value added to the dictionary. If the return value of &lt;code&gt;at:put:&lt;/code&gt; was the dictionary
object then the &lt;code&gt;yourself&lt;/code&gt; message wouldn&amp;rsquo;t be needed at all.&lt;/p&gt;
&lt;h2 id=&#34;accessing-elements&#34;&gt;Accessing elements&lt;/h2&gt;
&lt;p&gt;The basic method of getting values is to use the &lt;code&gt;at:&lt;/code&gt; message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Dictionary&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;newFrom:&lt;/span&gt; { &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; }&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;at:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt; 4&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just like in Python, if you try to access a key that doesn&amp;rsquo;t exist you&amp;rsquo;ll get an error&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;at:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;&amp;#34;Error KeyNotFound&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but unlike Python there are multiple ways to avoid this error using variants of the &lt;code&gt;at:&lt;/code&gt; message.
The &lt;code&gt;at:update:initial:&lt;/code&gt; message allows you either update or set a value in a dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;at:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;update:&lt;/span&gt; [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ] &lt;span class=&#34;nf&#34;&gt;initial:&lt;/span&gt; [ &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ]&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which is broadly equivelent to the following Python code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;KeyError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many other variants of &lt;code&gt;at:&lt;/code&gt; that modify the behaviour depending on whether the key is present
or not.&lt;/p&gt;
&lt;h2 id=&#34;enumerating&#34;&gt;Enumerating&lt;/h2&gt;
&lt;p&gt;Enumerating in Pharo Smalltalk can also be achieved in multiple ways. The &lt;code&gt;do:&lt;/code&gt; message is available in many
classes for iterating, which for Dictionaries iterates through the values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do:&lt;/span&gt; [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Transcript&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cr&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which is Python would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;do:&lt;/code&gt; message is an alias for &lt;code&gt;valuesDo:&lt;/code&gt; and there is also a &lt;code&gt;keysDo:&lt;/code&gt; for iterating through the keys
and &lt;code&gt;associationsDo:&lt;/code&gt; for iterating through the keyâ€“value pairs. Unlike Python which returns a tuple
of the key and value, in Pharo an Association object is returned. This class responds to the &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;
messages for accessing each.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;associationsDo:&lt;/span&gt; [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pair&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Transcript&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pair&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pair&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cr&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and the Python equivelent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Despite the differences introduced through the syntax of each language, using dictionaries in Pharo Smalltalk
and Python are basically the same.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Exploratory data analysis with Pharo Smalltalk</title>
			<link>/2020/12/10/exploratory-data-analysis-with-pharo-smalltalk/</link>
			<pubDate>Thu, 10 Dec 2020 20:19:12 -0800</pubDate>
			<author>c.skennerton@gmail.com (Connor Skennerton)</author>
			<guid isPermaLink="true">/2020/12/10/exploratory-data-analysis-with-pharo-smalltalk/</guid>
			<description>&lt;p&gt;The first time I heard about &lt;a href=&#34;https://en.wikipedia.org/wiki/Smalltalk&#34;&gt;Smalltalk&lt;/a&gt;
was reading through the &lt;a href=&#34;https://en.wikipedia.org/wiki/Ruby_(programming_language)&#34;&gt;wikipedia page for Ruby&lt;/a&gt;,
which mentioned it as an influence. At the time I was just a few months into my
transition from a wet-lab biologist into a bioinformatician and trying to decide
between Perl, Python, and Ruby as a scripting language to learn. &lt;label for=&#34;sn-who_won&#34; class=&#34;margin-toggle sidenote-number&#34;&gt;
&lt;/label&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;sn-who_won&#34; class=&#34;margin-toggle&#34; /&gt;
&lt;span class=&#34;sidenote&#34;&gt;
Python became my language of choice after a long battle with Perl
(this was some years ago and Perl was much more relevant).
&lt;/span&gt;

I remember being really intrigued at Smalltalk&amp;rsquo;s syntax and it&amp;rsquo;s pure object-oriented
approach; I was just starting to userstand what these concepts meant but
was already gravitating to OOP. This was a language that seemed very alien to what I was picking up
in C-derived scripting languages. I learned that you made a file with your
program in it and then passed that file as an argument to another program to
interpret it â€” that&amp;rsquo;s just how programming worked.&lt;/p&gt;
&lt;p&gt;In contrast, instead of code existing in files that are
run by an interpreter or compiled into a binary program, Smalltalk has the concept
of &lt;a href=&#34;https://en.wikipedia.org/wiki/Smalltalk#Image-based_persistence&#34;&gt;image-based persistence&lt;/a&gt;,
which encapsulates the current program state and all of the code into one. Editing your
code is equivelent to changing the program itself rather than a static copy that
gets turned into your program. This is a pretty wild concept and makes programming
much more interactive. An example of how this might streamline your workflow is in
debugging. Often programmers will use a debugger to step through the running code
line by line to see how variable change and find the place where are bug happens.
When the bug is found you then have to go to the line in the source and make the
required change (and either run the program again or re-compile). But with Smalltalk
you&amp;rsquo;re running &amp;ldquo;live&amp;rdquo; code so modifying it during debugging fixes it once. While I
can appreciate this now as a more accomplished programmer, as a newbie I was
utterly confused by it. I never picked it up Smalltalk.&lt;/p&gt;
&lt;p&gt;Recently I was back on wikipedia looking at some other programming language&amp;rsquo;s page
and again there was that smalltalk influence. So I scratched the itch and finally
downloaded Pharo â€” which seems to be one of the more popular implementations â€”
and tried out some basic data visualization.&lt;/p&gt;
&lt;p&gt;Pharo is an integrated environment, there isn&amp;rsquo;t really separate source code for writing
programs; they get written one method at a time in the IDE. But there is a playground
feature that allows you to write short scripts and generally play around. The code snippets
I show below are all taken from the playground.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;First we need to install some external packages. Unlike python or R there doesn&amp;rsquo;t seem to
be a single source of packages, instead repositories can be downloaded from URLs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nc&#34;&gt;Metacello&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;baseline:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Roassal3Exporters&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;repository:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;github://ObjectProfile/Roassal3Exporters&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;Metacello&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;baseline:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;DataFrame&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;repository:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;github://PolyMathOrg/DataFrame/src&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s look at some penguin data! I&amp;rsquo;m using the &lt;a href=&#34;https://allisonhorst.github.io/palmerpenguins/articles/palmerpenguins.html&#34;&gt;palmerpenduins&lt;/a&gt;
dataset that was built
with R in mind. The &lt;code&gt;DataFrame&lt;/code&gt; package can&amp;rsquo;t load from URLs directly but Pharo provides
some niffty built-in objects that allow us to convert the string URL into a &lt;code&gt;ZnURL&lt;/code&gt; object,
which we can retrieve the contents of (i.e. download).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;Convert the url string to a Url object and download the contents, passing that into the 
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt; data frame constructor.
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DataFrame&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readFromCsv:&lt;/span&gt; 
    &lt;span class=&#34;s&#34;&gt;&amp;#39;https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins_raw.csv&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asUrl&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;retrieveContents&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After that we can then set up the plot using the various Roassal classes. In the example
below I&amp;rsquo;m plotting the Culmen Length versus the Egg Date columns. It shows off a couple of
tricks I had to learn: first, was how to plot a date on the axis; and second, was how to
deal with &lt;code&gt;NA&lt;/code&gt; values in the data frame.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSChart&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;lineaxes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSScatterPlot&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;Importing the CSV file doesn&amp;#39;t recognize NA so convert them to NaN&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;lineaxes&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;x:&lt;/span&gt; ((&lt;span class=&#34;nv&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;column:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Date Egg&amp;#39;&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;collect:&lt;/span&gt; 
            [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;julianDayNumber&lt;/span&gt; ]) 
         &lt;span class=&#34;nf&#34;&gt;y:&lt;/span&gt; ((&lt;span class=&#34;nv&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;column:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Culmen Length (mm)&amp;#39;&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;collect:&lt;/span&gt; 
            [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;NA&amp;#39;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ifTrue:&lt;/span&gt; [&lt;span class=&#34;s&#34;&gt;&amp;#39;NaN&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asNumber&lt;/span&gt;] 
                            &lt;span class=&#34;nb&#34;&gt;ifFalse:&lt;/span&gt; [&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asNumber&lt;/span&gt;] ])&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addPlot:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lineaxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;vticks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSVerticalTick&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
 
&lt;span class=&#34;c&#34;&gt;&amp;#34;Offset controls the horizontal position&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ylabel:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Culmen Length (mm)&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;offset:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;-20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addDecoration:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;vticks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;hticks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSHorizontalTick&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;hticks&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;numberOfTicks:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;&amp;#34;Convert the julian day numbers back to Date objects. The asString message will
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;be sent during rendering to make it look pretty&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;hticks&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;labelConversion:&lt;/span&gt; [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;julianDayNumber:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;]&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;useDiagonalLabel&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addDecoration:&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;hticks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;openOnce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;/media/2020/12/penguins.png&#34;
         alt=&#34;Basic plot of Penguins with the date as the X-axis&#34; width=&#34;400&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Basic plot of Penguins with the date as the X-axis&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Next I wanted to try and replicate a Facet Grid one of the best features of
&lt;a href=&#34;https://seaborn.pydata.org&#34;&gt;seaborn&lt;/a&gt; and &lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt;
for plotting &lt;a href=&#34;https://en.wikipedia.org/wiki/Small_multiple&#34;&gt;small multiples&lt;/a&gt;. I couldn&amp;rsquo;t
find anything built in that would be the equivelent but Roassal has all of the primatives
to make this happen. My solution below is based on the examples in the Roassal package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;Create a canvas to add our charts to&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSCanvas&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;&amp;#34;First find the unique values in the species column and then loop through the values&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;groups&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; ((&lt;span class=&#34;nv&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;column:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Species&amp;#39;&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;uniqueValues&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;collect:&lt;/span&gt; [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;species&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; 

    &lt;span class=&#34;c&#34;&gt;&amp;#34;Subset the main dataset returning just the rows for the current species&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;spdf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;select:&lt;/span&gt; [&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; (&lt;span class=&#34;nv&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;at:&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#Species&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;species&lt;/span&gt; ]&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
    
    &lt;span class=&#34;c&#34;&gt;&amp;#34;Make a new group that will hold this chart&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSGroup&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSChart&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;container:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

    &lt;span class=&#34;c&#34;&gt;&amp;#34;Make a scatterplot&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;plot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSScatterPlot&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
    
    &lt;span class=&#34;c&#34;&gt;&amp;#34;Get the x and y values the same as above&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;plot&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;x:&lt;/span&gt; ((&lt;span class=&#34;nv&#34;&gt;spdf&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;column:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Date Egg&amp;#39;&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;asArray&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;collect:&lt;/span&gt; 
            [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;julianDayNumber&lt;/span&gt; ]) 
         &lt;span class=&#34;nf&#34;&gt;y:&lt;/span&gt; ((&lt;span class=&#34;nv&#34;&gt;spdf&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;column:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Culmen Length (mm)&amp;#39;&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;asArray&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;collect:&lt;/span&gt; 
            [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ifNil:&lt;/span&gt; [&lt;span class=&#34;s&#34;&gt;&amp;#39;NaN&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asNumber&lt;/span&gt;] 
                     &lt;span class=&#34;nf&#34;&gt;ifNotNil:&lt;/span&gt; [&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asNumber&lt;/span&gt;] ])&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addPlot:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;species&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;&amp;#34;The final statement of a block is returned... so here
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;     we are converting the group object, which holds the chart
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;     into a shape, which is needed to add onto the canvas
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;    &amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asShape&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
	]&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addAll:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;#34;Layout the three groups horizontally on the canvas&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;RSHorizontalLineLayout&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;on:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shapes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSCanvasController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;openOnce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;/media/2020/12/penguins-by-species.png&#34;
         alt=&#34;Split out the into three charts, one for each species&#34; width=&#34;800&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Split out the into three charts, one for each species&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can tell from the code samples above there is a lot of boilerplate to set this up.
Roassal isn&amp;rsquo;t a ggplot clone, it&amp;rsquo;s much more low level like base plotting in R or matplotlib.
It&amp;rsquo;s still impressive the variety of things that you can accomplish with it, 2D charts are
just one aspect of Roassal, which is probably why there is a bit more boiler plate than you
might want for just making a chart.&lt;/p&gt;
&lt;p&gt;There is also a bit of roughness to the DataFrame package. The type detection isn&amp;rsquo;t as smart as
in R so columns containing &lt;code&gt;NA&lt;/code&gt; were being left as strings. I fixed this in my examples above wtih:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-smalltalk&#34; data-lang=&#34;smalltalk&#34;&gt;(&lt;span class=&#34;nv&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;column:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Culmen Length (mm)&amp;#39;&lt;/span&gt;) &lt;span class=&#34;nf&#34;&gt;collect:&lt;/span&gt; 
            [ &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;NA&amp;#39;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ifTrue:&lt;/span&gt; [&lt;span class=&#34;s&#34;&gt;&amp;#39;NaN&amp;#39;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asNumber&lt;/span&gt;] 
                            &lt;span class=&#34;nb&#34;&gt;ifFalse:&lt;/span&gt; [&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;asNumber&lt;/span&gt;] ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;collect&lt;/code&gt; method returns a new data series where each element has been transformed using the
code block as it&amp;rsquo;s argument. In this can I&amp;rsquo;m checking for &lt;code&gt;NA&lt;/code&gt; and converting to &lt;code&gt;NaN&lt;/code&gt; or the
real number. Similarily, dealing with a date axis involved manually transforming it into a
julian day representation (so basically just a number) and back again for the label. Despite this
I&amp;rsquo;ve come away with a pretty positive opinion of both these packages. The code in DataFrame is easy
to approach and &lt;a href=&#34;https://github.com/PolyMathOrg/DataFrame/pull/134&#34;&gt;I&amp;rsquo;ve already tried to add in a small fix&lt;/a&gt;
that improves the parsing of boolean types from CSV files. I also picked up a bug in the &lt;code&gt;RSScatterPlot&lt;/code&gt;
class that was fixed by the developers almost instantly. It&amp;rsquo;s definitely a small community
but smalltalk makes it easy to investigate and patch bugs on the fly. It&amp;rsquo;s really quite cool
and lends itself to agile development.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to keep using Pharo on the side. For the moment I don&amp;rsquo;t think it could replace python/R
in my professional work but the language is easy and good for quicker analyses.&lt;/p&gt;
</description>
		</item>
	</channel>
</rss>
